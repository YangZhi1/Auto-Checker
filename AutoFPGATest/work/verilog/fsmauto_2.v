/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsmauto_2 (
    input clk,
    input rst,
    output reg aa,
    output reg bb,
    output reg carryin,
    input sum,
    input carryout,
    output reg wrongInput
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  localparam NOTHING_state = 4'd0;
  localparam A_state = 4'd1;
  localparam B_state = 4'd2;
  localparam C_state = 4'd3;
  localparam AB_state = 4'd4;
  localparam AC_state = 4'd5;
  localparam BC_state = 4'd6;
  localparam ABC_state = 4'd7;
  localparam WRONG_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = NOTHING_state;
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    aa = 1'h0;
    bb = 1'h0;
    carryin = 1'h0;
    wrongInput = 1'h0;
    M_counter_d = M_counter_q + 1'h1;
    M_edge_detector_in = M_counter_q[26+0-:1];
    
    case (M_state_q)
      NOTHING_state: begin
        aa = 1'h0;
        bb = 1'h0;
        carryin = 1'h0;
        if (M_edge_detector_out) begin
          if (sum == 1'h0 && carryout == 1'h0) begin
            M_state_d = C_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      A_state: begin
        aa = 1'h1;
        bb = 1'h0;
        carryin = 1'h0;
        if (M_edge_detector_out) begin
          if (sum == 1'h1) begin
            M_state_d = AC_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      B_state: begin
        aa = 1'h0;
        bb = 1'h1;
        carryin = 1'h0;
        if (M_edge_detector_out) begin
          if (sum == 1'h1) begin
            M_state_d = BC_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      C_state: begin
        aa = 1'h0;
        bb = 1'h0;
        carryin = 1'h1;
        if (M_edge_detector_out) begin
          if (sum == 1'h1) begin
            M_state_d = B_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      AB_state: begin
        aa = 1'h1;
        bb = 1'h1;
        carryin = 1'h0;
        if (M_edge_detector_out) begin
          if (carryout == 1'h1) begin
            M_state_d = ABC_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      AC_state: begin
        aa = 1'h1;
        bb = 1'h0;
        carryin = 1'h1;
        if (M_edge_detector_out) begin
          if (carryout == 1'h1) begin
            M_state_d = AB_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      BC_state: begin
        aa = 1'h0;
        bb = 1'h1;
        carryin = 1'h1;
        if (M_edge_detector_out) begin
          if (carryout == 1'h1) begin
            M_state_d = A_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      ABC_state: begin
        aa = 1'h1;
        bb = 1'h1;
        carryin = 1'h1;
        if (M_edge_detector_out) begin
          if (sum == 1'h1 && carryout == 1'h1) begin
            M_state_d = NOTHING_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      WRONG_state: begin
        wrongInput = 1'h1;
        aa = M_counter_q[24+0-:1];
        bb = M_counter_q[24+0-:1];
        carryin = M_counter_q[24+0-:1];
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
